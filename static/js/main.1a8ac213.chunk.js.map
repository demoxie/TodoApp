{"version":3,"sources":["components/CreateTask.js","components/Todo.js","serviceWorker.js","index.js"],"names":["CreateTask","addTask","useState","value","setValue","onSubmit","e","preventDefault","type","className","placeholder","onChange","target","Task","task","index","completeTask","removeTask","style","textDecoration","completed","title","background","onClick","Todo","tasksRemaining","setTasksRemaining","tasks","setTasks","useEffect","filter","length","newTasks","splice","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAyBeA,MAvBf,YAAkC,IAAZC,EAAW,EAAXA,QAClB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAUA,OACI,sBAAMC,SATW,SAAAC,GACjBA,EAAEC,iBACGJ,IAELF,EAAQE,GACRC,EAAS,MAIT,SACI,uBACII,KAAK,OACLC,UAAU,QACVN,MAAOA,EACPO,YAAY,iBACZC,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,aCjBjD,SAASU,EAAT,GAAuD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,WACtC,OACI,sBAAKR,UAAU,OAAOS,MAAO,CAACC,eAAgBL,EAAKM,UAAY,eAAe,IAA9E,UACKN,EAAKO,MAGN,wBAAQH,MAAO,CAAEI,WAAY,OAASC,QAAS,kBAAMN,EAAWF,IAAhE,eACA,wBAAQQ,QAAS,kBAAMP,EAAaD,IAApC,yBAMG,SAASS,IACpB,MAA4CtB,mBAAS,GAArD,mBAAOuB,EAAP,KAAuBC,EAAvB,KACA,EAA0BxB,mBAAS,CAC/B,CACImB,MAAO,kBACPD,WAAW,GAEf,CACIC,MAAO,kBACPD,WAAW,GAEf,CACIC,MAAO,uBACPD,WAAW,KAXnB,mBAAOO,EAAP,KAAcC,EAAd,KAcAC,qBAAU,WACNH,EAAkBC,EAAMG,QAAO,SAAAhB,GAAI,OAAKA,EAAKM,aAAWW,WAG5D,IAIMf,EAAe,SAAAD,GACjB,IAAMiB,EAAQ,YAAOL,GACrBK,EAASjB,GAAOK,WAAY,EAC5BQ,EAASI,IAEPf,EAAa,SAAAF,GACf,IAAMiB,EAAQ,YAAOL,GACrBK,EAASC,OAAOlB,EAAO,GACvBa,EAASI,IAGb,OACI,sBAAKvB,UAAU,iBAAf,UACA,sBAAKA,UAAU,SAAf,4BAAwCgB,EAAxC,OAEA,qBAAKhB,UAAU,QAAf,SACKkB,EAAMO,KAAI,SAACpB,EAAMC,GAAP,OACP,cAACF,EAAD,CACIC,KAAMA,EACNC,MAAOA,EAEPC,aAAcA,EACdC,WAAYA,GAFPF,QAMjB,qBAAKN,UAAU,cAAf,SACY,cAAC,EAAD,CAAYR,QA/BZ,SAAAoB,GACZ,IAAMW,EAAQ,sBAAOL,GAAP,CAAc,CAAEN,QAAOD,WAAW,KAChDQ,EAASI,WC1BGG,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1a8ac213.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Todo.css';\nfunction CreateTask({ addTask }) {\n    const [value, setValue] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!value) return;\n        \n        addTask(value);\n        setValue(\"\");\n    }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                className=\"input\"\n                value={value}\n                placeholder=\"Add a new task\"\n                onChange={e => setValue(e.target.value)}\n            />\n        </form>\n    );\n}\nexport default CreateTask;","import React, { useState,useEffect } from 'react';\nimport './Todo.css';\nimport CreateTask from './CreateTask'\nfunction Task({task, index, completeTask, removeTask}){\n    return (\n        <div className=\"task\" style={{textDecoration: task.completed ? \"line-through\":\"\"}}>\n            {task.title}\n\n            \n            <button style={{ background: \"red\" }} onClick={() => removeTask(index)}>x</button>\n            <button onClick={() => completeTask(index)}>Complete</button>\n\n        </div>\n    );\n}\n\nexport default function Todo() {\n    const [tasksRemaining, setTasksRemaining] = useState(0);\n    const [tasks, setTasks] = useState([\n        {\n            title: \"Grab some Pizza\",\n            completed: true\n        },\n        {\n            title: \"Do your workout\",\n            completed: true\n        },\n        {\n            title: \"Hangout with friends\",\n            completed: false\n        }\n    ]);\n    useEffect(() => { \n        setTasksRemaining(tasks.filter(task => !task.completed).length) \n      });\n  \n    const addTask = title => {\n        const newTasks = [...tasks, { title, completed: false }];\n        setTasks(newTasks);\n    };\n    const completeTask = index => {\n        const newTasks = [...tasks];\n        newTasks[index].completed = true;\n        setTasks(newTasks);\n    };\n    const removeTask = index => {\n        const newTasks = [...tasks];\n        newTasks.splice(index, 1);\n        setTasks(newTasks);\n    };\n\n    return (\n        <div className=\"todo-container\">\n        <div className=\"header\">Pending tasks ({tasksRemaining})</div>\n        \n        <div className=\"tasks\">\n            {tasks.map((task, index) => (\n                <Task\n                    task={task}\n                    index={index}\n                    key={index}\n                    completeTask={completeTask}\n                    removeTask={removeTask}\n                />\n            ))}\n        </div>\n        <div className=\"create-task\" >\n                    <CreateTask addTask={addTask} />\n                </div>\n    </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './components/Todo';\nimport * as serviceWorker from './serviceWorker';;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();;\n"],"sourceRoot":""}